#!/usr/bin/env python3

# copyright (c) 2010-2021, Christian Mayer and the CometVisu contributers.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA

import os
import time
import re
import json
from argparse import ArgumentParser
from sh import git
from github import Github


source_dir = '%s/source' % os.environ['GITHUB_WORKSPACE'] if 'GITHUB_WORKSPACE' in os.environ is not None else "."
client_dir = '%s/client/source' % os.environ['GITHUB_WORKSPACE'] if 'GITHUB_WORKSPACE' in os.environ is not None else "."
script_dir = os.path.dirname(os.path.realpath(__file__))

g = Github(os.environ["GITHUB_TOKEN"])
repo = g.get_repo(os.environ["GITHUB_REPOSITORY"])
max_text_length = 70


def get_last_tag(version):
    out = git('for-each-ref', '--format=%(refname)', '--sort=-taggerdate', 'refs/tags')
    refs = list(filter(None, out.split('\n')))

    for ref in refs:
        if re.search(r'^refs/tags/%s(\d+)$' % re.escape(version), ref):
            return ref

    return None


def get_version():
    # read from package.json
    with open("package.json") as f:
        package_info = json.loads(f.read())
        return "v%s" % package_info["version"]


def check_for_changes(ref):
    end_ref = git('rev-parse', '--abbrev-ref', 'HEAD').strip()
    raw = git('--no-pager', 'log', '--pretty=format:', '--name-only', '%s..%s' % (ref, end_ref), source_dir)
    changed_files = [x.rstrip("\n") for x in raw if len(x.rstrip("\n")) > 0]
    return len(changed_files) > 0


def get_request_description(pr_id):
    pr = repo.get_pull(pr_id)
    text = pr.title.strip()
    body = [x for x in pr.body.strip().split("\n") if not re.match(r"^\s*Signed-off-by:.+$", x)]
    if text[-1:] == "…" and len(body) > 0 and body[0][0:1] == "…":
        text = "%s%s" % (text[0:-1].strip(), body.pop(0)[1:].strip())
    # text += " %s" % (" ".join(body))
    return "- [#{pr_id}]({repo}) {text} (@{author})\n".format(
        pr_id=pr_id,
        repo=pr.html_url,
        text=(text[:max_text_length] + '…' if len(text) > max_text_length else text),
        author=pr.user.login)


def get_merge_info(ref):
    end_ref = git('rev-parse', '--abbrev-ref', 'HEAD').strip()
    out = git('--no-pager', 'log', '--format=%B', '%s..%s' % (ref, end_ref))

    text = ''
    for line in out.split('\n'):
        res = re.search(r"^Merge pull request #([\d]+) from.+$", line)
        if res:
            text += get_request_description(int(res.group(1)))

    return text


if __name__ == '__main__':
    commands = ["last-tag"]

    parser = ArgumentParser(usage="%(prog)s - CometVisu tag management for releases")
    parser.add_argument("--version", "-v", dest="version")
    parser.add_argument("--dry-run", action="store_true", dest="dry_run")
    parser.add_argument("--start", action="store_true", dest="start")
    parser.add_argument('action', type=str, help='action (%s)' % ", ".join(commands), nargs='?')
    options, unknown = parser.parse_known_args()

    if options.action == "last-tag":
        version_base = options.version if options.version is not None else get_version()
        print("searching last tag for %s" % version_base)
        print("%s" % get_last_tag(version_base))

    if options.action == "read-pr":
        print(get_request_description(int(options.version)))

    else:
        version_base = options.version if options.version is not None else get_version()
        if "NIGHLTY_ONLY" in os.environ and os.environ["NIGHLTY_ONLY"] == "1" and version_base[-4:] != "-dev":
            print('No nightly build version %s - aborting' % version_base)
            exit(2)

        if re.match(r".\d+$", version_base):
            # end with number -> avoid v0.12.01 tags, we want v0.12.0-1
            version_base += "-"
        info = get_last_tag(version_base)
        use_last_release = False

        if not info:
            if not options.start:
                print("Need a manual starting tag for %s - aborting" % version_base)
                exit(2)
            else:
                info = "refs/tags/%s" % repo.get_latest_release().tag_name
                use_last_release = True

        last_tag_hash = git('rev-list', '-n', '1', info).strip()

        current_hash = git('rev-parse', 'HEAD').strip()

        m = re.search(r'^%s(\d+)$' % re.escape(version_base), info.split('/')[2])
        build_no = 0
        if not m:
            if not options.start:
                print("Unable to parse previous tag '%s'" % info.split('/')[2])
                exit(3)
        else:
            build_no = int(m.group(1))

        new_rev = "%s%d" % (version_base, build_no + 1)

        if current_hash == last_tag_hash:
            print('No new commits - skipping')
            exit()
        elif not check_for_changes(info):
            print('No changes in source folder - skipping')
            exit()

        print('New commits detected - tagging new dev release: %s' % new_rev)

        branch = git('rev-parse', '--abbrev-ref', 'HEAD').strip()
        build_info = """
---

Branch       : {branch}
Commit       : {ref}
""".format(branch=branch, ref=current_hash)

        tag_description = ""
        info = get_merge_info(info) if not use_last_release else None
        if info:
            tag_description += 'This release comes with these annotated changes:\n\n'
            tag_description += info
        else:
            tag_description += 'This release contains minor fixes or improvements.\n'

        git.config("user.name", os.environ["COMMIT_AUTHOR_NAME"])
        git.config("user.email", os.environ["COMMIT_AUTHOR_EMAIL"])

        if not options.dry_run:
            git.tag('-a', '-F', '-', new_rev,  _in=tag_description + build_info)
            time.sleep(10)
        else:
            print("git tag -a -F %s" % new_rev)

        print("Pushing changes...")
        if not options.dry_run:
            git.push('origin', new_rev)

        print("Creating release...")
        release_name = new_rev
        prerelease = False
        draft = True
        changes = "The latest changes can be seen in the [change log](https://raw.githubusercontent.com/CometVisu/CometVisu/{new_rev}/ChangeLog)."

        if branch == "develop":
            if version_base[-3:] == "dev":
                release_name = "CometVisu nightly build %s" % new_rev
                prerelease = True
                changes = tag_description
            elif version_base[-2:] == "RC":
                release_name = "CometVisu release %s - release candidate %s" % (version_base[1:-3], new_rev[len(version_base):])
                prerelease = True

        release_message="""
The CometVisu project is happy to publish the version {new_rev} that can be downloaded at 
[https://github.com/CometVisu/CometVisu/releases/tag/{new_rev}](https://github.com/CometVisu/CometVisu/releases/tag/{new_rev}).

{changes}
""".format(new_rev=new_rev, changes=changes)

        if not options.dry_run:
            repo.create_git_release(new_rev, release_name, release_message, draft=draft, prerelease=prerelease)
        else:
            print("would have created new git release '%s' from tag '%s', draft=%s, prerelease=%s\n\n%s" % (release_name, new_rev, draft, prerelease, release_message))

